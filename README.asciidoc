== Jenkins Guide

This repository contains the code (config, src and script files) to set up and run a Cob-Jenkins CI Server using the Cob-Pipeline-PlugIn.

=== 1. Prerequisites

==== 1.1 Operating System
Install the Operating System of your choice for your Server.

Supported OS are:
Windows
- Debian/Ubuntu
- Red Hat/Fedora/CentOS
- MacOS X
- openSUSE
- FreeBSD
- OpenBSD
- Solaris/OpenIndiana
- Gentoo

Installation Guide for Ubuntu-Server: +https://github.com/ipa-fmw-ak/Administration/wiki/01.-Ubuntu-Server-IPA-Guide[Ubuntu Server IPA Guide]+

Installation Guide for Ubuntu-Client: +https://github.com/ipa-fmw-ak/Administration/wiki/02.-Ubuntu-Client---IPA-Guide[Ubuntu Client IPA Guide]+

This Guide proceed for an Ubuntu-Environment...

==== 1.2 Java Runtime Environment

===== 1.2.1 Check your Java Version:
----
$ java -version
----
_Output example:_
----
java version "1.6.0_35"
Java(TM) SE Runtime Environment (build 1.6.0_35-b10)
Java HotSpot(TM) Client VM (build 20.10-b01, mixed mode, sharing)
----

===== 1.2.2 Install Java6
----
$ sudo apt-get install openjdk-6-jre
$ sudo apt-get install openjdk-6-jdk openjdk-6-source openjdk-6-doc openjdk-6-jre-headless openjdk-6-jre-lib 
----

===== 1.2.4 Install Java7
----
$ sudo apt-get install openjdk-7-jre
$ sudo apt-get install openjdk-7-jdk openjdk-7-source openjdk-7-doc openjdk-7-jre-headless openjdk-7-jre-lib
----

==== 1.3 Git
----
$ sudo apt-get update && sudo apt-get install git-core
----

==== 1.4 Maven
----
$ sudo apt-get update && sudo apt-get install maven
----

''''

=== 2. Jenkins Installation

==== 2.1 Preparing a Build Server for Jenkins

For isolated environment use:
----
$ sudo adduser jenkins
$ sudo groupadd build
$ sudo adduser jenkins build
----

Define your ^JAVA_HOME^
----
$ export JAVA_HOME=/usr/local/java/<YOUR JAVA VERSION> *like: jdk1.6.0
$ export PATH=$JAVA_HOME/bin:$PATH
----

==== 2.2 Define Standart Directories
----
$ export JENKINS_BASE=/usr/local/jenkins
$ export JENKINS_HOME=/var/jenkins-data
----

==== 2.3 Debian packages "Debian/Ubuntu"
----
$ wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
$ sudo echo "deb http://pkg.jenkins-ci.org/debian binary/" > /etc/apt/sources.list.d/jenkins.list
----
----
$ sudo apt-get update && sudo apt-get install -y jenkins
----

Individual Package Downloads: +http://pkg.jenkins-ci.org/debian/+

==== 2.4 Up and Downgrade
Upgrade to v1.514

You can find the war file here: +http://mirrors.jenkins-ci.org/war/+

----
$ cd /usr/share/jenkins/
$ sudo rm -rf jenkins.war
$ sudo wget http://mirrors.jenkins-ci.org/war/1.514/jenkins.war
----
----
$ /etc/init.d/jenkins restart
----

After a successfull installation you can access the Jenkins-Server in your browser: +http://localhost:8080+

==== 2.5 Port Configuration
By Stand-Alone Application you can define the Port with this command:
----
$ java -jar jenkins.war --httpPort=8081
----

If you run more Applications on the Server, you have to override the ajp13 Port:
----
$ java -jar jenkins.war --httpPort=8081 --ajp13Port=8010
----

To start from implemented Winston-Server just define the control Port:
----
$ java -jar jenkins.war --controlPort=8001
----

Runing behind an Apache-Server
----
$ java -jar jenkins.war --httpPort=8081 --ajp13Port=8010 --prefix=jenkins
----

==== 2.6 Start and stop the Jenkins-Server on an Application-Server
----
$ /etc/init.d/jenkins stop
$ /etc/init.d/jenkins start
----

==== 2.7 Memory Considerations
Define the ^MAVEN_OPTS^ and ^ANT_OPTS^:
----
$ export MAVEN_OPTS="-Xm512m -XX:MaxPermSize=256m"
$ export ANT_OPTS="-Xm512m -XX:MaxPermSize=256m"
----

''''

=== 3. Jenkins Configuration

==== 3.1 Global Security
First off all went to +http://localhost:8080/configureSecurity/?+

The *Access Control* section gives the opportunity to select the *Security Realm* which defines how the users can login.

Check *Jenkins's own user database*.

The easiest way is to use *Jenkins's own user database*.
Now you can decide if every user can sign up or if the admin has to do this.

In the *Authorization* subsection you can define the permission a specific user or a user group gets granted.
Therefore choose the *Project-based Matrix Authorization Strategy*.

Now add an Admin-User and give them all rights!

After click save the Server will throw you to a Login screen. Just register with the username of the admin you insert in
the table.

You have to give permissions to at least the Anonymous and the authenticated user group and an admin user.
The latter two have to be added to the matrix.

Every user will automatically get the permission to see the workspace of all its own jobs.
For the 'Pipestarter' and 'Trigger' job it will also has 'Build'-permission.

If you want to grant further permissions or give special permissions to individual users or user groups you can do it.

==== 3.2 Manage Jenkins

Under +http://localhost:8080/configure+ you can configure your Jenkins-Server.

===== 3.2.1 Basic

- *Home Directory* is a reference to the JENKINS_HOME directory.

- *System Message* is for welcome messages.

- *# of executors* gives the number of simultaneously build job can start.

- *Quite Period* are the seconds for Jenkins to wait until triggering a build job.

- *SCM Checkout retry count* determines the number of attempts Jenkins make to check
out any updates when polling the SCM system for changes and finds the system to be unavailable.

===== 3.2.2 Global Properties
The *Global Properties* section lets you define variables that can be managed centrally but used in all of
your build jobs.

===== 3.2.3 JDKs
Select your version of Java or just download a new one.

===== 3.2.4 Ant
Ant is a flexible, extensible, relatively low-level scripting language used in a large number of open source projects.

If Ant is available on the system path, Jenkins will find it.

If you want you can configure as many installations of Ant as required. Just provide a name and installation directory for each version. 

===== 3.2.5 Maven
Maven is high-level scripting framework for Java.

You can either get Jenkins to install a specific version of Maven automatically or provide a path to a local Maven installation.

===== 3.2.6 Maven Project Configuration
Here you can configure the default values for Maven. They will be used in every build step.

===== 3.2.7 SSH Server
Here you can configure the SSH Server. Default is Random.

===== 3.2.8 CVS
Jenkins comes with preinstalled PlugIns for CVS and Subversion. Other Version Control Systems can be downloaded from the Manage PlugIns screen.

CVS needs little or no configuration. By default Jenkins will look for tools like CVS on the system path.

===== 3.2.9 Subversion
Subversion needs no special configuration.

===== 3.2.10 Shell
If you are running your build server on Unix or Linux Jenkins lets you insert shell scripts into your build jobs. In Windows, the Shell section does not apply. You use Windows batch scripting instead.

===== 3.2.11 E-Mail Notification
The last of the basic configurations is to setup the email server.

The *System Admin E-Mail Address* is the address from which the notifications will be sent.

You can also configure in this section the SMTP-Server.

''''

=== 4. Jenkins-PlugIns Installation

Went to +http://localhost:8080/pluginManager/available+ and "check" the wanted PlugIns for installation.

For more information visit the *https://wiki.jenkins-ci.org/display/JENKINS/Plugins[Jenkins Wiki]*

''''

=== 5. IPA Configuration

==== 5.1 Robotic Operating System
+https://github.com/ipa-fmw-ak/Administration/wiki/05.-ROS-Guide[ROS Guide]+

==== 5.2 Master

===== 5.2.1 Create Cob-Pipeline Configuration Folder

All configurations should be stored in a common folder in the ^$HOME^ folder called ^jenkins-config^.
----
$ mkdir ~/jenkins-config
----

===== 5.2.2 Git Configuration

Set up the GitHub user. This user has to have read-access to all repositories to build and write-access to your ^jenkins_config^ repository.
----
$ git config --global user.name "<USER_NAME>"
$ git config --global user.email "<EMAIL>"
----

===== 5.2.3 SSH Configuration

A *.ssh* folder is needed inside the ^jenkins-config^ which contains a ssh-key to access the GitHub-repositories. Either you generate a new key with +ssh-keygen+ or you just copy the *~/.ssh* of the master. You have to add this key to your GitHub user http://github.com/settings/ssh[SSH Settings]. This user should have read-access to all repositories you want to build. It is very important that 'github.com' belongs to the known hosts. Therefore the *.ssh* folder should contain a ^known_hosts^ file. Whether 'github.com' is already known can be checked by entering:
----
$ ssh-keygen -H -f <known_hosts_PATH> -F github.com
----
If it is not known, you can add 'github.com' to the ^known_hosts^ by entering:
----
$ ssh-keyscan -H github.com > <known_hosts_PATH>
----
Furthermore the Jenkins masters SSH key itself has to be an authorized one.

===== 5.2.4 jenkins_config Repository

Clone the ^jenkins_config^ repository into the ^jenkins-config^ folder.
----
$ git clone git@github.com:ipa320/jenkins_config.git ~/jenkins-config/jenkins_config
----
_Adapt the GitHub user if you forked the repository!!!_

===== 5.2.5 jenkins_setup Repository

Clone the ^jenkins_setup^ repository into the ^jenkins-config^ folder.
----
$ git clone git@github.com:ipa320/jenkins_setup.git ~/jenkins-config/jenkins_setup
----
_Adapt the GitHub user if you forked the repository!!!_

===== 5.2.6 PYTHONPATH

Add the ^jenkins_setup^ module to the +$PYTHONPATH+ (adapt the ROS_RELEASE).
----
$ echo "export PYTHONPATH=~/jenkins-config/jenkins_setup/src" > /etc/profile.d/python_path.sh
$ echo "source /opt/ros/<ROS_RELEASE>/setup.sh" >> /etc/profile.d/python_path.sh
----

Afterwards reboot the Jenkins-Server!

===== 5.2.7 Tarball Server

The tarball server stores all the chroot tarball which will be used during the build process. It can be the Jenkins master or another server. In both cases you have to create a ^chroot_tarballs^ folder in *$HOME* which contains another folder where the used chroot tarballs will be stored.
----
$ mkdir -p ~/chroot_tarballs/in_use_on__<JENKINS_MASTER_NAME>
----

==== 5.3 Slave
*TODO!!!*

==== 5.4 The Cob-Pipeline

For the usage of the Cob-Pipeline three parts are necessary:

- https://github.com/fmw-jk/cob-pipeline-plugin[Cob-Pipeline-Plugin]

This plugin allows the user to configure its individual build/test pipeline via the Jenkins web interface. Afterwards the automatic generation of the pipeline can be triggered.

- https://github.com/ipa320/jenkins_setup[jenkins_setup repository]

This repository has to be available on the Jenkins server. It includes the code for the pipeline generation.

- https://github.com/ipa320/jenkins_config[jenkins_config repository]

In this repository all the pipeline configurations are stored.

===== 5.4.1 Install the Cob-Pipeline

Download the *.hpi* file from +https://github.com/fmw-jk/cob-pipeline-plugin/releases+
and place it in ^<JENKINS_HOME>/plugins^. After that restart your Jenkins-Server.

----
$ cd /var/jenkins-data/plugins
$ sudo wget https://github.com/fmw-jk/cob-pipeline-plugin/releases/download/v0.9.5-alpha/cob-pipeline.hpi
----
----
$ /etc/init.d/jenkins restart
----

===== 5.4.2 Configure the Cob-Pipeline

Go to the Cob Pipeline Configuration section. The following fields are all required for the use.

- *Jenkins Admin Login/Password*

This is the user you configured before in the Configure Security part with all the permissions. Enter its login name and password.
    
- *Configuration Folder*
    
Enter the path of the Cob-Pipeline configuration folder.
    
- *Tarball Location*
    
Enter the location where the tarballs are stored.
    
- *GitHub User Login/Password*
    
This is the user that has read-permission to all the repositories you want to be tested. It has also write-permission to your jenkins-config repository.
    
- *Pipeline Repositories Owner/Fork*
    
GitHub user that ownes the jenkins_setup and the jenkins_config repository.
    
- *ROS Releases*
    
ROS versions that should be supported by your build/test pipeline.
    
- *Robots*
    
Nodes which can be chosen for Hardware Build/Test jobs.
    
- *Target Platform Url*
    
URL where the ROS ^targets.yaml^ is stored, defining the Ubuntu target platforms for each ROS Version, e.g..

_When you fill out the fields, the values will be validated in the background._

===== 5.4.3 Pipeline Structure

The pipeline is made of multiple, differing Jenkins jobs which monitor the source code or build and test it in various envirements. An authorized Jenkins user can configure its individual pipeline in its Jenkins user configurations. The made configurations have to pass a validation and afterwards the automatic generation of the pipeline can be started.

A fully configured pipeline has always this structure:

* Starter Jobs

.. Pipestarter Job

* Build Jobs

.. Priority-Build Job

.. Regular-Build Job

.. Downstream-Build Job

* Test Jobs

.. Non-Graphics-Test Job

.. Graphics-Test Job

* Hardware Jobs

.. Hardware-Build Job

.. Hardware-Test Job

===== 5.4.4 Manual Pipeline Generation

*Checkout this Repository*
*TODO!!!*

*Setup Slave Config-File*
*TODO!!!*

*Add Repository to PYTHONPATH*
*TODO!!!*

*Setup Pipeline Configuration
*TODO!!!*

*Create Pipeline*
*TODO!!!*

==== 5.5 PlugIns

Went to +http://localhost:8080/pluginManager/available+

- https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin[*Parameterized Trigger PlugIn*]

Is used to transfer build parameters from one job to the next. Here it is used to commit the repository to build or test.

- http://code.google.com/p/build-pipeline-plugin/[*Build Pipeline PlugIn*]

Provides a view where all pipeline jobs and their dependencies are shown. It also gives the opportunity to trigger the hardware test jobs manually.

- https://wiki.jenkins-ci.org/display/JENKINS/Mailer[*Mailer*]

Generates the email content depending on the build/test results and sends the emails.

_CONFIGURATION_:

A template for the Mailer plugin is provided in https://github.com/ipa320/jenkins_setup/blob/master/templates/email-templates/html-with-health-builds-tests.jelly[this] repository. Copy it into +$JENKINS_HOME/email-templates+ (+$JENKINS_HOME+ is usually +/var/lib/jenkins+). You can adapt the template to your requirements.

- https://wiki.jenkins-ci.org/display/JENKINS/View+Job+Filters[*View Job Filters*]

Provides comprehensive possibilities to filter the jobs that can be seen by the specific user.

- https://wiki.jenkins-ci.org/display/JENKINS/Matrix+Reloaded+Plugin[*Matrix Reloaded PlugIn*]

To start one or more entries of a matrix job.

- https://wiki.jenkins-ci.org/display/JENKINS/LDAP+Plugin[*LDAP PlugIn*]

Authentication of users is delegated to a LDAP server.

- https://wiki.jenkins-ci.org/display/JENKINS/Github+OAuth+Plugin[*Github OAuth PlugIn*]

Authentication of users is delegated to Github using the OAuth protocol.

_More PlugIns will follow..._

==== 5.6 Global and Individual Project List Views
*TODO!!!*

==== 5.7 Backup your Jenkins-Server
*TODO!!!*

''''

=== 6. Build Jobs

==== 6.1 Creating a Build Job

===== 6.1.1 General Options
*TODO!!!*

===== 6.1.2 Advanced Project Options
*TODO!!!*

==== 6.2 Configuring Source Code Management

===== 6.2.1 Subversion
*TODO!!!*

===== 6.2.2 Git
*TODO!!!*

==== 6.3 Build Triggers

===== 6.3.1 Scheduled Build Jobs
*TODO!!!*

===== 6.3.2 Polling the SCM
*TODO!!!*

===== 6.3.3 Triggering Builds Remotely
*TODO!!!*

===== 6.3.4 Manual Build Jobs
*TODO!!!*

==== 6.4 Build Steps

===== 6.4.1 Ant Build Steps
*TODO!!!*

===== 6.4.2 Maven Build Steps
*TODO!!!*

===== 6.4.3 Executing a Shell or Windows Batch Command
*TODO!!!*

===== 6.4.4 Using Jenkins Environment Variables in Builds
*TODO!!!*

===== 6.4.5 Runing Groovy Scripts
*TODO!!!*

''''
