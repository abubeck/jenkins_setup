== Jenkins Guide

=== 1. Prerequisites

==== 1.1 Operating System
Install the Operating System of your choice for your Server.

Supported OS are:
Windows
- Debian/Ubuntu
- Red Hat/Fedora/CentOS
- MacOS X
- openSUSE
- FreeBSD
- OpenBSD
- Solaris/OpenIndiana
- Gentoo

Installation Guide for Debian/Ubuntu-Server: +http://+

Installation Guide for Debian/Ubuntu-Client: +http://+

This Guide proceed for an Debian/Ubuntu environment...

==== 1.2 Java Runtime Environment

===== 1.2.1 Check your Java Version:
----
$ java -version
----
_Output example:_
----
java version "1.6.0_35"
Java(TM) SE Runtime Environment (build 1.6.0_35-b10)
Java HotSpot(TM) Client VM (build 20.10-b01, mixed mode, sharing)
----

===== 1.2.2 Install Java6
----
$ sudo apt-get install openjdk-6-jre
$ sudo apt-get install openjdk-6-jdk openjdk-6-source openjdk-6-doc openjdk-6-jre-headless openjdk-6-jre-lib 
----

===== 1.2.4 Install Java7
----
$ sudo apt-get install openjdk-7-jre
$ sudo apt-get install openjdk-7-jdk openjdk-7-source openjdk-7-doc openjdk-7-jre-headless openjdk-7-jre-lib
----

==== 1.3 Git
----
$ sudo apt-get install git-core
----

==== 1.4 Maven
----
$ sudo apt-get update && sudo apt-get install maven
----

''''

=== 2. Jenkins Installation

==== 2.1 Preparing a Build Server for Jenkins

For isolated environment use:
----
$ sudo groupadd build
$ sudo adduser --create-home --shell /bin/bash --groups build jenkins
----

Define your ^JAVA_HOME^
----
$ export JAVA_HOME=/usr/local/java/<YOUR JAVA VERSION> *like: jdk1.6.0
$ export PATH=$JAVA_HOME/bin:$PATH
----

==== 2.2 Define Standart Directories
----
$ export JENKINS_BASE=/usr/local/jenkins
$ export JENKINS_HOME=/var/jenkins-data
$ java -jar ${JENKINS_BASE}/jenkins.war
----

==== 2.3 Debian packages "Debian/Ubuntu"
----
$ wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
$ sudo echo "deb http://pkg.jenkins-ci.org/debian binary/" > /etc/apt/sources.list.d/jenkins.list
----
----
$ sudo apt-get update && sudo apt-get install -y jenkins
----

Individual Package Downloads: +http://pkg.jenkins-ci.org/debian/+

==== 2.4 Up and Downgrade
Upgrade to v1.514

You can find the war file here: +http://mirrors.jenkins-ci.org/war/+

----
$ cd /user/share/jenkins/
$ sudo rm -rf jenkins.war
$ sudo wget http://mirrors.jenkins-ci.org/war/1.514/jenkins.war
----
----
$ /etc/init.d/jenkins restart
----

After a successfull installation you can access the Jenkins-Server in your browser: +http://localhost:8080+

==== 2.5 Port Configuration
By Stand-Alone Application you can define the Port with this command:
----
$ java -jar jenkins.war --httpPort=8081
----

If you run more Applications on the Server, you have to override the ajp13 Port:
----
$ java -jar jenkins.war --httpPort=8081 --ajp13Port=8010
----

To start from implemented Winston-Server just define the control Port:
----
$ java -jar jenkins.war --controlPort=8001
----

Runing behind an Apache-Server
----
$ java -jar jenkins.war --httpPort=8081 --ajp13Port=8010 --prefix=jenkins
----

==== 2.6 Start and stop the Jenkins-Server on an Application-Server
----
$ /etc/init.d/jenkins stop
$ /etc/init.d/jenkins start
----

==== 2.7 Memory Considerations
Define the ^JAVA_OPTS^, ^MAVEN_OPTS^ and ^ANT_OPTS^:
----
$ export JAVA_OPTS=-Djava.awt.headless=true -Xmx512m -DJENKINS_HOME=/data/jenkins
$ export MAVEN_OPTS="-Xm512m -XX:MaxPermSize=256m"
$ export ANT_OPTS="-Xm512m -XX:MaxPermSize=256m"
----

''''

=== 3. Jenkins Configuration

==== 3.1 Configure Global Security
First off all went to +http://localhost:8080/configureSecurity/?+

The *Access Control* section gives the opportunity to select the *Security Realm* which defines how the users can login.

Check *Jenkins's own user database*.

The easiest way is to use *Jenkins's own user database*.
Now you can decide if every user can sign up or if the admin has to do this.

In the *Authorization* subsection you can define the permission a specific user or a user group gets granted.
Therefore choose the *Project-based Matrix Authorization Strategy*.

Now add an Admin-User and give them all rights!

After click save the Server will throw you to a Login screen. Just register with the username of the admin you insert in
the table.

You have to give permissions to at least the Anonymous and the authenticated user group and an admin user.
The latter two have to be added to the matrix.

Every user will automatically get the permission to see the workspace of all its own jobs.
For the 'Pipestarter' and 'Trigger' job it will also has 'Build'-permission.

If you want to grant further permissions or give special permissions to individual users or user groups you can do it.

==== 3.2 System Configuration
Under +http://localhost:8080/configure+ you can configure your Jenkins-Server.

On the top you can see where Jenkins have the Home Directory. 

In System Message you can create a Welcome Message for your Jenkins-Server.

On this site will be listed the PlugIn configuration options too!

==== 3.3 JDKs
*TODO!!!*

==== 3.4 Build Tools

===== 3.4.1 Ant
*TODO!!!*

===== 3.4.2 Maven
*TODO!!!*

===== 3.4.3 Shell-Scripting
*TODO!!!*

==== 3.5 Version Control Tools
*TODO!!!*

==== 3.6 Mail-Server
*TODO!!!*

''''

=== 4. Jenkins-PlugIns Installation

Went to +http://localhost:8080/pluginManager/available+ and "check" the wanted PlugIns for installation.

For more information visit the Jenkins Wiki for PlugIns: +https://wiki.jenkins-ci.org/display/JENKINS/Plugins+

''''

=== 5. IPA Configuration

==== 5.1 Robotic Operating System

===== 5.1.1 Install ROS "fuerte" and "groovy"
----
$ sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu precise main" > /etc/apt/sources.list.d/ros-latest.list'
$ wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
$ sudo apt-get update
----
----
$ sudo apt-get install ros-fuerte-desktop-full
$ sudo apt-get install ros-groovy-desktop-full
----
----
$ sudo rosdep init
$ rosdep update
----

===== 5.1.2 Environment setup
----
# for fuerte
$ echo "source /opt/ros/fuerte/setup.bash" >> ~/.bashrc
$ source ~/.bashrc
----
----
# for groovy
$ echo "source /opt/ros/groovy/setup.bash" >> ~/.bashrc
$ source ~/.bashrc
----
if you just want to change the environment of your current shell, you can type:
----
# for fuerte
$ source /opt/ros/fuerte/setup.bash
----
----
# for groovy
$ source /opt/ros/groovy/setup.bash
----

===== 5.1.3 Install additional tools
----
$ sudo apt-get install python-rosinstall python-rosdep
$ sudo apt-get install python-setuptools ogre-tools ros-groovy-diagnostics-monitors
$ sudo apt-get install ros-groovy-rxtools ros-groovy-pr2-* ros-groovy-client-rosjava-jni
$ sudo apt-get install ros-groovy-openni*
----

==== 5.2 Master
*TODO!!!*

==== 5.3 Slave
*TODO!!!*

==== 5.4 The Cob-Pipeline

===== 5.4.1 Install the Cob-Pipeline

Download the *.hpi* file from +https://github.com/fmw-jk/cob-pipeline-plugin/releases+
and place it in ^<JENKINS_HOME>/plugins^. After that restart your Jenkins-Server.

----
$ cd /var/jenkins-data/plugins
$ sudo wget https://github.com/fmw-jk/cob-pipeline-plugin/releases/download/v0.9.5-alpha/cob-pipeline.hpi
----
----
$ /etc/init.d/jenkins restart
----

===== 5.4.2 Configure the Cob-Pipeline
*TODO!!!*

==== 5.5 PlugIns
*TODO!!!*

==== 5.6 Backup your Jenkins-Server
*TODO!!!*

''''

=== 6. Build Jobs

==== 6.1 Creating a Build Job

===== 6.1.1 General Options
*TODO!!!*

===== 6.1.2 Advanced Project Options
*TODO!!!*

==== 6.2 Configuring Source Code Management

===== 6.2.1 Subversion
*TODO!!!*

===== 6.2.2 Git
*TODO!!!*

==== 6.3 Build Triggers

===== 6.3.1 Scheduled Build Jobs
*TODO!!!*

===== 6.3.2 Polling the SCM
*TODO!!!*

===== 6.3.3 Triggering Builds Remotely
*TODO!!!*

===== 6.3.4 Manual Build Jobs
*TODO!!!*

==== 6.4 Build Steps

===== 6.4.1 Ant Build Steps
*TODO!!!*

===== 6.4.2 Maven Build Steps
*TODO!!!*

===== 6.4.3 Executing a Shell or Windows Batch Command
*TODO!!!*

===== 6.4.4 Using Jenkins Environment Variables in Builds
*TODO!!!*

===== 6.4.5 Runing Groovy Scripts
*TODO!!!*

''''
