#######prio_build#######

'prio_build': '#!/bin/bash -e

date

new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${repository}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux

echo "Copying "$new_basetgz" from @(STORAGE)"

scp @(STORAGE)/$new_basetgz $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.ssh $WORKSPACE/

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/jenkins_setup $WORKSPACE/

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$repository

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

PIPELINE_REPOS_OWNER=@(PIPELINEREPOSOWNER)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE


echo "***********ENTER CHROOT************"

date

sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --save-after-exec --bindmounts $WORKSPACE -- $WORKSPACE/jenkins_setup/scripts/pbuilder_env.sh $WORKSPACE

echo "***********LEAVE CHROOT************"


date'


#######regular_build#######

'regular_build': '#!/bin/bash -e


new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${repository}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux


echo "Copying "$new_basetgz" from @(STORAGE)"

scp @(STORAGE)/$new_basetgz $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.ssh $WORKSPACE/

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/jenkins_setup $WORKSPACE/

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$repository

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

PIPELINE_REPOS_OWNER=@(PIPELINEREPOSOWNER)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE


echo "***********ENTER CHROOT************"

sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --bindmounts $WORKSPACE -- $WORKSPACE/jenkins_setup/scripts/pbuilder_env.sh $WORKSPACE

echo "***********LEAVE CHROOT************"
'


#######nongraphics_test#######

'nongraphics_test': '#!/bin/bash -e

new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${repository}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux


echo "Copying "$basetgz" from @(STORAGE)/in_use"

scp @(STORAGE)/in_use/$basetgz $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.ssh $WORKSPACE/

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/jenkins_setup $WORKSPACE/

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$repository

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

PIPELINE_REPOS_OWNER=@(PIPELINEREPOSOWNER)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE


echo "***********ENTER CHROOT************"


sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --bindmounts $WORKSPACE -- $WORKSPACE/jenkins_setup/scripts/pbuilder_env.sh $WORKSPACE

echo "***********LEAVE CHROOT************"
'


#######graphics_test#######

'graphics_test': '#!/bin/bash -e

new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${repository}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux


echo "Copying "$basetgz" from @(STORAGE)/in_use"

scp @(STORAGE)/in_use/$basetgz $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.ssh $WORKSPACE/

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/jenkins_setup $WORKSPACE/

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$repository

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

PIPELINE_REPOS_OWNER=@(PIPELINEREPOSOWNER)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE

$WORKSPACE/jenkins_setup/scripts/graphicTest/host/prepareForChroot.bash $WORKSPACE

if [ $? != 0 ]; then

echo "Error: Preparation failed"

exit 1

fi


echo "***********ENTER CHROOT************"


sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --bindmounts "$WORKSPACE /tmp/.X11-unix /tmp/nvidia" -- $WORKSPACE/jenkins_setup/scripts/graphicTest/chroot/setupGraphicEnv.bash $WORKSPACE

echo "***********LEAVE CHROOT************"
'


#######downstream_build#######

'downstream_build': '#!/bin/bash -e

new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${repository}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux


echo "Copying "$basetgz" from @(STORAGE)/in_use"

scp @(STORAGE)/in_use/$basetgz $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.ssh $WORKSPACE/

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/jenkins_setup $WORKSPACE/

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$repository

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

PIPELINE_REPOS_OWNER=@(PIPELINEREPOSOWNER)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE


echo "***********ENTER CHROOT************"


sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --bindmounts $WORKSPACE -- $WORKSPACE/jenkins_setup/scripts/pbuilder_env.sh $WORKSPACE

echo "***********LEAVE CHROOT************"

echo "*******CLEANUP WORKSPACE*******"

echo "STORING CHROOT TARBALL ON @(STORAGE)"

scp $WORKSPACE/../aux/${basetgz}_downstream @(STORAGE)/in_use/

'


#######downstream_test#######

'downstream_test': '#!/bin/bash -e

new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${repository}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux


echo "Copying "$basetgz" from @(STORAGE)/in_use"

scp @(STORAGE)/in_use/${basetgz}_downstream $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/.ssh $WORKSPACE/

scp -r jenkins@@(SERVERNAME):@(CONFIG_FOLDER)/jenkins_setup $WORKSPACE/

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$repository

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

PIPELINE_REPOS_OWNER=@(PIPELINEREPOSOWNER)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE


echo "***********ENTER CHROOT************"


sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --bindmounts $WORKSPACE -- $WORKSPACE/jenkins_setup/scripts/pbuilderEnv.bash $WORKSPACE

echo "***********LEAVE CHROOT************"
'


#######hardware_build#######

'hardware_build': '#!/bin/bash -e

    if [ -d @(USERNAME)/${repository} ]; then

        sudo cp -r @(USERNAME)/${repository} @(USERNAME)/${repository}_backup

    fi

    mkdir @(USERNAME)/${repository}


    echo "============================================================\n==== Begin" $SCRIPT "script.    Ignore the output above ====\n============================================================"

    python hardware_build.py

    echo "============================================================\n==== Begin" $SCRIPT "script.    Ignore the output above ====\n============================================================"


    if [[ $? != 0 ]]; then

        sudo cp -rf @(USERNAME)/${repository}_backup @(USERNAME)/${repository}

    fi

    sudo rm -r @(USERNAME)/${repository}_backup

    TODO

'


#######automatic_hw_test#######

'automatic_hw_test': '#!/bin/bash -e'


#######interactive_hw_test#######

'interactive_hw_test,': '#!/bin/bash -e'
