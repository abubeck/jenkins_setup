'prio': '#!/bin/bash -e

new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${REPOSITORY}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux

echo "Copying "$new_basetgz" from @(STORAGE)"

scp @(STORAGE)/$new_basetgz $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):~/jenkins-config/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):~/jenkins-config/.ssh $WORKSPACE/.ssh

ls -lah $WORKSPACE


echo "Cloning jenkins_setup repository"

git clone @(CONFIGREPO) $WORKSPACE/jenkins_setup

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$REPOSITORY

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

#TODO

CONFIG_REPO=@(CONFIGREPO)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results # TODO

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE


echo "***********ENTER CHROOT************"

echo "*********please be patient*********"


sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --save-after-exec --bindmounts $WORKSPACE -- $WORKSPACE/jenkins_setup/scripts/pbuilder_env.sh $WORKSPACE


echo "*******CLEANUP WORKSPACE*******"

echo "STORING CHROOT TARBALL ON @(STORAGE)"

scp $WORKSPACE/../aux/${basetgz} @(STORAGE)/in_use/

sudo rm -rf $WORKSPACE/../aux'

'regular_build': '#!/bin/bash -e


new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${repository}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux


echo "Copying "$new_basetgz" from @(STORAGE)"

scp @(STORAGE)/$new_basetgz $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):~/jenkins-config/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):~/jenkins-config/.ssh $WORKSPACE/.ssh

ls -lah $WORKSPACE


echo "Cloning jenkins_setup repository"

git clone @(CONFIGREPO) $WORKSPACE/jenkins_setup

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$REPOSITORY

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

#TODO

CONFIG_REPO=@(CONFIGREPO)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results # TODO

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE


echo "***********ENTER CHROOT************"

echo "*********please be patient*********"

sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --bindmounts $WORKSPACE -- $WORKSPACE/jenkins_setup/scripts/pbuilder_env.sh $WORKSPACE


echo "*******CLEANUP WORKSPACE*******"

sudo rm -rf $WORKSPACE/../aux'

'downstream_build': '#!/bin/bash -e

new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${REPOSITORY}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux


echo "Copying "$basetgz" from @(STORAGE)/in_use"

scp @(STORAGE)/in_use/$basetgz $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):~/jenkins-config/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):~/jenkins-config/.ssh $WORKSPACE/.ssh

ls -lah $WORKSPACE


echo "Cloning jenkins_setup repository"

git clone @(CONFIGREPO) $WORKSPACE/jenkins_setup

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$REPOSITORY

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

#TODO

CONFIG_REPO=@(CONFIGREPO)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results # TODO

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE


echo "***********ENTER CHROOT************"

echo "*********please be patient*********"


sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --bindmounts $WORKSPACE -- $WORKSPACE/jenkins_setup/scripts/pbuilder_env.sh $WORKSPACE


echo "*******CLEANUP WORKSPACE*******"

sudo rm -rf $WORKSPACE/../aux'

'test': '#!/bin/bash -e

new_basetgz=${ubuntu_distro}__${arch}__${ros_distro}

basetgz=@(USERNAME)__${new_basetgz}__${REPOSITORY}


sudo rm -rf $WORKSPACE/*

if [ -d $WORKSPACE/../aux ]; then

sudo rm -rf $WORKSPACE/../aux

fi

mkdir $WORKSPACE/../aux


echo "Copying "$basetgz" from @(STORAGE)/in_use"

scp @(STORAGE)/in_use/$basetgz $WORKSPACE/../aux/${basetgz}

scp jenkins@@(SERVERNAME):~/jenkins-config/.gitconfig $WORKSPACE/.gitconfig

scp -r jenkins@@(SERVERNAME):~/jenkins-config/.ssh $WORKSPACE/.ssh

ls -lah $WORKSPACE


echo "Cloning jenkins_setup repository"

git clone @(CONFIGREPO) $WORKSPACE/jenkins_setup

ls -lah $WORKSPACE


cat &gt; $WORKSPACE/env_vars.sh &lt;&lt;DELIM

JOBNAME=$JOB_NAME

ROSDISTRO=$ros_distro

REPOSITORY=$REPOSITORY

UBUNTUDISTRO=$ubuntu_distro

ARCH=$arch

#TODO

CONFIG_REPO=@(CONFIGREPO)

JENKINS_MASTER=@(SERVERNAME)

JENKINS_USER=@(USERNAME)

JOBTYPE=@(JOB_TYPE_NAME)

export ROS_TEST_RESULTS_DIR=/tmp/test_repositories/src_repository/test_results # TODO

export BUILD_ID=$BUILD_ID

DELIM


ls -lah $WORKSPACE


echo "***********ENTER CHROOT************"

echo "*********please be patient*********"


sudo pbuilder execute --basetgz $WORKSPACE/../aux/${basetgz} --bindmounts $WORKSPACE -- $WORKSPACE/jenkins_setup/scripts/pbuilder_env.sh $WORKSPACE


echo "*******CLEANUP WORKSPACE*******"

sudo rm -rf $WORKSPACE/../aux'

'nongraphics_test': '#!/bin/bash -e'

'graphics_test': '#!/bin/bash -e'

'hardware_build': '#!/bin/bash -e'

'automatic_hw_test': '#!/bin/bash -e'

'interactive_hw_test,': '#!/bin/bash -e'
